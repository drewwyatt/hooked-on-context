{"version":3,"sources":["our-fake-time-lib.ts","utils.tsx","examples/ComponentClassExample/index.ts","examples/ComponentClassExample/Clock.tsx","examples/HooksExample/state.ts","examples/HooksExample/context.tsx","examples/HooksExample/useTime.ts","examples/HooksExample/view.tsx","examples/HooksExample/Clock.tsx","examples/HooksExample/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["HourType","withRouteProps","c","AmPm","isTwelveHour","hourType","twelve","setThatOneInterval","n","window","clearInterval","Time","Object","classCallCheck","this","_hours","_minutes","_seconds","_hourType","twentyFour","callbacks","date","Date","getHours","getMinutes","getSeconds","setInterval","_handleInterval","bind","createClass","key","value","set","getHourType","pm","am","na","event","callback","hours","minutes","seconds","amPm","getAmPm","triggerCallbackIfExists","indexOf","params","getTimeEvent","ComponentClassExample","time","state","hourTypeSelect","map","_this","hourTypeToRadio","assertThisInitialized","react_default","a","createElement","type","name","checked","isSelectedHourType","onChange","handleHourClick","_ref","target","setHourType","getFormattedTime","_this$state","numbers","pad0","join","concat","str","toString","length","update","_","setState","on","React","Component","DEFAULT_STATE","reducer","action","objectSpread","payload","currentTime","createContext","useReducer","TimeContext","undefined","TimeContextProvider","children","_useReducer","_useReducer2","slicedToArray","dispatch","Provider","useTime","context","arguments","_useContext","useContext","useRef","useEffect","current","h","m","s","ht","e","useCallback","Numbers","react","Controls","_ref2","setter","view_Control","Control","_ref3","Clock","_useTime","_useTime2","view_Numbers","view_Controls","HooksExample","context_TimeContextProvider","HooksExample_Clock_Clock","withBasePath","path","Home","role","aria-label","App","Fragment","es","to","basepath","App_Home","default","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dee6340e.chunk.js","sourcesContent":["export enum HourType {\n  twelve = '12 hour',\n  twentyFour = '24 hour',\n}\n\nconst isTwelveHour = (hourType: HourType): hourType is HourType.twelve =>\n  hourType === HourType.twelve\n\nexport enum AmPm {\n  am = 'am',\n  pm = 'pm',\n  na = '',\n}\n\ntype BaseTimeEvent = {\n  hours: number\n  minutes: number\n  seconds: number\n}\n\nexport interface TwelveHourTimeEvent extends BaseTimeEvent {\n  hourType: HourType.twelve\n  amPm: AmPm.am | AmPm.pm\n}\n\nexport interface TwentyFourHourTimeEvent extends BaseTimeEvent {\n  hourType: HourType.twelve\n  amPm: AmPm.na\n}\n\nconst INTERVAL_KEY = 'DREWS_INTERVAL_KEY'\nconst setThatOneInterval = (n: number) => {\n  if ((window as any)[INTERVAL_KEY]) {\n    clearInterval((window as any)[INTERVAL_KEY])\n  }\n\n  ;(window as any)[INTERVAL_KEY] = n\n}\n\nexport type TimeEvent = TwelveHourTimeEvent | TwentyFourHourTimeEvent\n\ninterface EventParams {\n  hours: number\n  minutes: number\n  seconds: number\n\n  hourType: HourType\n}\n\ntype EventCallback<T> = (val: T, timeEvent: TimeEvent) => void\n\ntype CallbackSet = Record<keyof EventParams, EventCallback<any>>\n\nexport class Time {\n  private _hours: number\n  private _minutes: number\n  private _seconds: number\n  private _hourType: HourType = HourType.twentyFour\n  private callbacks: Partial<CallbackSet> = {}\n\n  constructor() {\n    const date = new Date()\n    this._hours = date.getHours()\n    this._minutes = date.getMinutes()\n    this._seconds = date.getSeconds()\n\n    setThatOneInterval(setInterval(this._handleInterval.bind(this), 1000) as any)\n  }\n\n  public setHourType(value: HourType) {\n    this.set('hourType', value)\n  }\n\n  public getHourType() {\n    return this._hourType\n  }\n\n  public getHours(): number {\n    return isTwelveHour(this._hourType) && this._hours > 12\n      ? this._hours - 12\n      : this._hours\n  }\n\n  public getMinutes(): number {\n    return this._minutes\n  }\n\n  public getSeconds(): number {\n    return this._seconds\n  }\n\n  public getAmPm(): AmPm {\n    if (isTwelveHour(this.getHourType())) {\n      return this._hours > 11 ? AmPm.pm : AmPm.am\n    }\n\n    return AmPm.na\n  }\n\n  public on<TEvent extends keyof EventParams>(\n    event: TEvent,\n    callback: EventCallback<EventParams[TEvent]>,\n  ): void {\n    this.callbacks[event] = callback\n  }\n\n  private _handleInterval() {\n    const date = new Date()\n    this.set('hours', date.getHours())\n    this.set('minutes', date.getMinutes())\n    this.set('seconds', date.getSeconds())\n  }\n\n  private getTimeEvent(): TimeEvent {\n    return {\n      hours: this.getHours(),\n      minutes: this.getMinutes(),\n      seconds: this.getSeconds(),\n      hourType: this.getHourType(),\n      amPm: this.getAmPm(),\n    } as TimeEvent\n  }\n\n  private set(\n    key: 'hours' | 'minutes' | 'seconds' | 'hourType',\n    value: number | HourType,\n  ) {\n    if (key === 'hourType' && this._hourType !== value) {\n      this._hourType = value as HourType\n      this.triggerCallbackIfExists(key, value as any)\n    } else if (['hours', 'minutes', 'seconds'].indexOf(key) > -1) {\n      if ((this as any)['_' + key] !== (value as number)) {\n        ;(this as any)['_' + key] = value as number\n        this.triggerCallbackIfExists(key, value as any)\n      }\n    }\n  }\n\n  private triggerCallbackIfExists<TEvent extends keyof EventParams>(\n    event: TEvent,\n    params: EventParams[TEvent],\n  ) {\n    if (event in this.callbacks) {\n      ;(this.callbacks[event] as any)(params, this.getTimeEvent())\n    }\n  }\n}\n","import { ComponentType } from 'react'\nimport { RouteComponentProps } from '@reach/router'\n\nexport const withRouteProps = <Props extends {}>(c: ComponentType<Props>) =>\n  c as ComponentType<Props & RouteComponentProps>\n","import { withRouteProps } from '../../utils'\nimport Clock from './Clock'\n\nexport const ComponentClassExample = withRouteProps(Clock)\n","import React from 'react'\nimport { Time, TimeEvent, AmPm, HourType } from 'our-fake-time-lib'\n\ntype State = {\n  hours: number\n  minutes: number\n  seconds: number\n  amPm: AmPm\n  hourType: HourType\n}\n\nclass Clock extends React.Component<{}, State> {\n  private time = new Time()\n  public state = {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    amPm: AmPm.na,\n    hourType: HourType.twentyFour,\n  }\n\n  componentDidMount() {\n    this.time.on('seconds', this.update.bind(this))\n    this.time.on('hourType', this.update.bind(this))\n  }\n\n  render() {\n    return (\n      <fieldset>\n        <legend>Component Class Example</legend>\n        <h1>{this.getFormattedTime()}</h1>\n        {this.hourTypeSelect()}\n      </fieldset>\n    )\n  }\n\n  private hourTypeSelect = (): JSX.Element[] =>\n    [HourType.twelve, HourType.twentyFour].map(this.hourTypeToRadio.bind(this))\n\n  private hourTypeToRadio = (hourType: HourType): JSX.Element => (\n    <label>\n      <input\n        key={hourType}\n        type=\"radio\"\n        name=\"hour-type\"\n        value={hourType}\n        checked={this.isSelectedHourType(hourType)}\n        onChange={this.handleHourClick.bind(this)}\n      />\n      {hourType}\n    </label>\n  )\n\n  private handleHourClick = ({ target: { value } }: any) => {\n    this.time.setHourType(value)\n  }\n\n  private isSelectedHourType = (hourType: HourType): boolean =>\n    hourType === this.state.hourType\n\n  private setHourType = (hourType: HourType) => {\n    this.time.setHourType(hourType)\n  }\n\n  private getFormattedTime = () => {\n    const { hours, minutes, seconds, amPm } = this.state\n    const numbers = [hours, minutes, seconds].map(this.pad0).join(':')\n    return `${numbers} ${amPm}`\n  }\n\n  private pad0 = (n: number): string => {\n    const str = n.toString()\n    return str.length > 1 ? str : '0' + str\n  }\n\n  private update = (_: unknown, time: TimeEvent): void => {\n    this.setState(time)\n  }\n}\n\nexport default Clock\n","import { AmPm, HourType, TimeEvent } from 'our-fake-time-lib'\n\n// Models\n\nexport type State = {\n  hours: number\n  minutes: number\n  seconds: number\n  hourType: HourType\n  amPm: AmPm\n}\n\nexport const DEFAULT_STATE: State = {\n  hours: 0,\n  minutes: 0,\n  seconds: 0,\n  hourType: HourType.twentyFour,\n  amPm: AmPm.na,\n}\n\n// Action Creators\n\nexport const setHours = (payload: number) =>\n  ({\n    type: 'SET_HOURS',\n    payload,\n  } as const)\n\nexport const setMinutes = (payload: number) =>\n  ({\n    type: 'SET_MINUTES',\n    payload,\n  } as const)\n\nexport const setSeconds = (payload: number) =>\n  ({\n    type: 'SET_SECONDS',\n    payload,\n  } as const)\n\nexport const setHourType = (hourType: HourType, currentTime: TimeEvent) =>\n  ({\n    type: 'SET_HOUR_TYPE',\n    payload: {\n      hourType,\n      currentTime,\n    },\n  } as const)\n\nexport const setAmPm = (payload: AmPm) =>\n  ({\n    type: 'SET_AMPM',\n    payload,\n  } as const)\n\nexport const init = (payload: State) =>\n  ({\n    type: 'INIT',\n    payload,\n  } as const)\n\nexport type Action =\n  | ReturnType<typeof setHours>\n  | ReturnType<typeof setMinutes>\n  | ReturnType<typeof setSeconds>\n  | ReturnType<typeof setAmPm>\n  | ReturnType<typeof setHourType>\n  | ReturnType<typeof init>\n\n// Reducer\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'INIT':\n      return { ...state, ...action.payload }\n    case 'SET_HOURS':\n      return { ...state, hours: action.payload }\n    case 'SET_MINUTES':\n      return { ...state, minutes: action.payload }\n    case 'SET_SECONDS':\n      return { ...state, seconds: action.payload }\n    case 'SET_HOUR_TYPE':\n      return {\n        ...state,\n        hourType: action.payload.hourType,\n        hours: action.payload.currentTime.hours,\n        amPm: action.payload.currentTime.amPm,\n      }\n    case 'SET_AMPM':\n      return { ...state, amPm: action.payload }\n    default:\n      return state\n  }\n}\n","import React, { Dispatch, FC } from 'react'\nimport { Action, DEFAULT_STATE, reducer, State } from './state'\n\nconst { createContext, useReducer } = React\n\ntype StateWithDispatch = {\n  state: State\n  dispatch: Dispatch<Action>\n}\n\nexport const TimeContext = createContext<StateWithDispatch>(undefined as any)\n\nexport const TimeContextProvider: FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, DEFAULT_STATE)\n  return (\n    <TimeContext.Provider value={{ state, dispatch }}>{children}</TimeContext.Provider>\n  )\n}\n","import { useCallback, useContext, useEffect, useRef } from 'react'\nimport { Time, AmPm, HourType } from 'our-fake-time-lib'\nimport { TimeContext } from './context'\nimport { setHours, setMinutes, setSeconds, setHourType, init, State } from './state'\n\nexport { AmPm, HourType }\n\nconst useTime = (\n  context: typeof TimeContext = TimeContext,\n): [State, (h: HourType) => void] => {\n  const { state, dispatch } = useContext(context)\n  let time = useRef<Time | undefined>()\n  useEffect(() => {\n    time.current = new Time()\n    dispatch(\n      init({\n        amPm: time.current.getAmPm(),\n        hours: time.current.getHours(),\n        hourType: time.current.getHourType(),\n        minutes: time.current.getMinutes(),\n        seconds: time.current.getSeconds(),\n      }),\n    )\n    time.current.on('hours', h => dispatch(setHours(h)))\n    time.current.on('minutes', m => dispatch(setMinutes(m)))\n    time.current.on('seconds', s => dispatch(setSeconds(s)))\n    time.current.on('hourType', (ht, e) => dispatch(setHourType(ht, e)))\n    // eslint-disable-next-line\n  }, [])\n\n  const setHourTypeOnTime = useCallback(\n    (hourType: HourType) => {\n      time.current && time.current.setHourType(hourType)\n    },\n    [time],\n  )\n\n  return [state, setHourTypeOnTime]\n}\n\nexport default useTime\n","import * as React from 'react'\nimport useTime, { HourType } from './useTime'\n\n// Numbers\n// (i.e. The top part)\n\ntype NumberProps = ReturnType<typeof useTime>[0]\n\nconst pad0 = (n: number): string => {\n  const str = n.toString()\n  return str.length > 1 ? str : '0' + str\n}\n\nexport const Numbers: React.FC<NumberProps> = ({ hours, minutes, seconds, amPm }) => {\n  const numbers = [hours, minutes, seconds].map(pad0).join(':')\n  return <h1>{`${numbers} ${amPm}`}</h1>\n}\n\n// Controls\n\ntype HourTypeSetter = ReturnType<typeof useTime>[1]\ntype ControlsProps = Pick<NumberProps, 'hourType'> & {\n  setter: HourTypeSetter\n}\nexport const Controls: React.FC<ControlsProps> = ({ hourType, setter }) => (\n  <>\n    {[HourType.twelve, HourType.twentyFour].map(ht => (\n      <Control value={ht} current={hourType} setter={setter} />\n    ))}\n  </>\n)\n\ntype ControlProps = {\n  value: HourType\n  current: HourType\n  setter: HourTypeSetter\n}\nconst Control = ({ value, current, setter }: ControlProps) => (\n  <label>\n    <input\n      key={value}\n      type=\"radio\"\n      name=\"hour-type\"\n      value={value}\n      checked={value === current}\n      onChange={() => setter(value)}\n    />\n    {value}\n  </label>\n)\n","import React from 'react'\nimport { TimeContextProvider } from './context'\nimport useTime from './useTime'\nimport { Numbers, Controls } from './view'\n\nconst Clock = () => {\n  const [time, setHourType] = useTime()\n  return (\n    <fieldset>\n      <legend>Hooks Example</legend>\n      <Numbers {...time} />\n      <Controls hourType={time.hourType} setter={setHourType} />\n    </fieldset>\n  )\n}\n\nconst ClockWithProvider = () => (\n  <TimeContextProvider>\n    <Clock />\n  </TimeContextProvider>\n)\n\nexport default ClockWithProvider\n","import { withRouteProps } from '../../utils'\nimport Clock from './Clock'\n\nexport const HooksExample = withRouteProps(Clock)\n","import React from 'react'\nimport { Link, Router, RouteComponentProps } from '@reach/router'\nimport { ComponentClassExample, HooksExample } from './examples'\nimport './App.css'\n\nconst BASE_PATH = 'hooked-on-context'\nconst withBasePath = (path: string) => `/${BASE_PATH}/${path}`\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <header>\n        <nav>\n          <Link to={withBasePath('component-class')}>Component Class Example</Link>\n          <Link to={withBasePath('hooks')}>Hooks Example</Link>\n        </nav>\n      </header>\n      <main>\n        <Router basepath={BASE_PATH}>\n          <Home default />\n          <ComponentClassExample path=\"component-class\" />\n          <HooksExample path=\"hooks\" />\n        </Router>\n      </main>\n    </>\n  )\n}\n\nconst Home: React.FC<RouteComponentProps> = () => (\n  <h1>\n    <span role=\"img\" aria-label=\"wave\">\n      👋\n    </span>\n  </h1>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}